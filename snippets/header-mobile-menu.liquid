{% comment %}
  Renders the mobile menu drawer

  Accepts:
  - menu: {Object} Link list object (required)

  Usage:
  {% render 'header-mobile-menu', menu: section.settings.menu %}
{% endcomment %}

<!-- Mobile Menu Overlay -->
<div
  class="mobile-menu"
  id="mobile-menu"
  aria-hidden="true"
  data-mobile-menu
>
  <div class="mobile-menu__overlay" data-menu-overlay></div>
  <div class="mobile-menu__content">
    <div class="mobile-menu__header">
      <button
        class="mobile-menu__close"
        aria-label="{{ 'navigation.close_menu' | t }}"
        data-menu-close
      >
        <span class="close-icon" aria-hidden="true">
          <span class="close-icon__line"></span>
          <span class="close-icon__line"></span>
        </span>
      </button>
    </div>

    <nav class="mobile-menu__nav" aria-label="Mobile navigation">
      <ul class="mobile-menu__list">
        {% if menu and menu.links.size > 0 %}
          {% for link in menu.links %}
            <li class="mobile-menu__item">
              <a href="{{ link.url }}" class="mobile-menu__link">{{ link.title }}</a>
            </li>
          {% endfor %}
        {% endif %}
      </ul>
    </nav>
  </div>
</div>

{% stylesheet %}
  /* Mobile Menu Overlay */
  .mobile-menu {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100vh;
    z-index: 9999;
    opacity: 0;
    visibility: hidden;
  }

  .mobile-menu[aria-hidden='false'] {
    opacity: 1;
    visibility: visible;
  }

  .mobile-menu__overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgb(0 0 0 / 0.5);
  }

  .mobile-menu__content {
    position: relative;
    width: 100%;
    height: 100%;
    background-color: var(--color-background-default);
    transform: translateX(-100%);
    display: flex;
    flex-direction: column;
  }

  .mobile-menu[aria-hidden='false'] .mobile-menu__content {
    transform: translateX(0);
  }

  .mobile-menu__header {
    display: flex;
    justify-content: flex-end;
    padding: 1rem;
    border-bottom: 1px solid rgb(0 0 0 / 0.1);
  }

  .mobile-menu__close {
    background: none;
    border: none;
    padding: 0.5rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 4px;
  }

  .mobile-menu__close:hover {
    background-color: rgb(0 0 0 / 0.05);
  }

  .mobile-menu__close:focus {
    outline: 2px solid var(--color-foreground);
    outline-offset: 2px;
  }

  /* Close Icon */
  .close-icon {
    position: relative;
    width: 20px;
    height: 20px;
  }

  .close-icon__line {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 100%;
    height: 2px;
    background-color: var(--color-foreground);
    transform-origin: center;
  }

  .close-icon__line:nth-child(1) {
    transform: translate(-50%, -50%) rotate(45deg);
  }

  .close-icon__line:nth-child(2) {
    transform: translate(-50%, -50%) rotate(-45deg);
  }

  .mobile-menu__nav {
    flex: 1;
    padding: 2rem 0;
  }

  .mobile-menu__list {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .mobile-menu__item {
    border-bottom: 1px solid rgb(0 0 0 / 0.05);
  }

  .mobile-menu__link {
    display: block;
    padding: 1rem 2rem;
    color: var(--color-foreground);
    text-decoration: none;
    font-size: 1.125rem;
    font-weight: 500;
  }

  .mobile-menu__link:hover {
    background-color: rgb(0 0 0 / 0.05);
    color: var(--color-foreground);
  }

  .mobile-menu__link:focus {
    outline: 2px solid var(--color-foreground);
    outline-offset: -2px;
  }

  /* Desktop - hide mobile menu */
  @media (min-width: 768px) {
    .mobile-menu {
      display: none;
    }
  }
{% endstylesheet %}

{% javascript %}
  class MobileMenu {
    constructor() {
      this.menuToggle = document.querySelector('[data-menu-toggle]');
      this.mobileMenu = document.querySelector('[data-mobile-menu]');
      this.menuOverlay = document.querySelector('[data-menu-overlay]');
      this.menuClose = document.querySelector('[data-menu-close]');
      this.isOpen = false;

      this.init();
    }

    init() {
      if (!this.menuToggle || !this.mobileMenu) {
        console.error('MobileMenu: Required elements not found');
        return;
      }

      this.bindEvents();
      this.setupFocusManagement();
    }

    bindEvents() {
      this.menuToggle.addEventListener('click', () => this.toggle());
      this.menuClose.addEventListener('click', () => this.close());
      this.menuOverlay.addEventListener('click', () => this.close());

      // Close on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.isOpen) {
          this.close();
        }
      });

      // Close on window resize to desktop
      window.addEventListener('resize', () => {
        if (window.innerWidth >= 768 && this.isOpen) {
          this.close();
        }
      });
    }

    setupFocusManagement() {
      // Trap focus within mobile menu when open
      this.mobileMenu.addEventListener('keydown', (e) => {
        if (!this.isOpen) return;

        const focusableElements = this.mobileMenu.querySelectorAll(
          'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
        );
        const firstElement = focusableElements[0];
        const lastElement = focusableElements[focusableElements.length - 1];

        if (e.key === 'Tab') {
          if (e.shiftKey) {
            if (document.activeElement === firstElement) {
              e.preventDefault();
              lastElement.focus();
            }
          } else {
            if (document.activeElement === lastElement) {
              e.preventDefault();
              firstElement.focus();
            }
          }
        }
      });
    }

    toggle() {
      this.isOpen ? this.close() : this.open();
    }

    open() {
      this.isOpen = true;
      this.menuToggle.setAttribute('aria-expanded', 'true');
      this.mobileMenu.setAttribute('aria-hidden', 'false');
      document.body.style.overflow = 'hidden';

      // Focus first focusable element
      const firstFocusable = this.mobileMenu.querySelector(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
      );
      if (firstFocusable) {
        firstFocusable.focus();
      }
    }

    close() {
      this.isOpen = false;
      this.menuToggle.setAttribute('aria-expanded', 'false');
      this.mobileMenu.setAttribute('aria-hidden', 'true');
      document.body.style.overflow = '';

      // Return focus to menu toggle
      this.menuToggle.focus();
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new MobileMenu());
  } else {
    new MobileMenu();
  }
{% endjavascript %}
