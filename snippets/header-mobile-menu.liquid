{% doc %}
  Mobile Navigation Menu

  Renders a full-screen mobile menu drawer with overlay.

  @param {object} shop_menu - Shop navigation menu (required)
  @param {object} marketing_menu - Marketing/utility menu (optional)

  @example
  {% render 'header-mobile-menu',
    shop_menu: section.settings.shop_menu,
    marketing_menu: section.settings.marketing_menu
  %}
{% enddoc %}

{% liquid
  assign shop_menu = shop_menu | default: empty
  assign marketing_menu = marketing_menu | default: empty
%}

<!-- Mobile Header Bar -->
<nav class="bg-[var(--color-background-default)] border-b border-black/12 h-16 flex items-center justify-between px-4">
  <button
    class="flex items-center justify-center p-2 rounded hover:bg-black/5 focus:outline-2 focus:outline-[var(--color-foreground)] focus:outline-offset-2"
    aria-label="Open navigation menu"
    aria-expanded="false"
    data-menu-toggle
  >
    {{ 'icon-menu.svg' | inline_asset_content }}
  </button>

  <a href="{{ routes.root_url }}" aria-label="{{ shop.name | escape }}" class="[&>svg]:size-12">
    {{ 'logo.svg' | inline_asset_content }}
  </a>

  <div class="flex items-center gap-2">
    <a href="account" aria-label="Account" class=" size-6 [&>svg]:size-6">
      {{ 'icon-account.svg' | inline_asset_content }}
    </a>
    <a
      href="{{ routes.cart_url }}"
      aria-label="Cart"
      aria-haspopup="drawer"
      id="cart-icon-bubble"
      class="px-1 [&>svg]:size-6"
    >
      {{ 'icon-cart.svg' | inline_asset_content }}
    </a>
  </div>

  <!-- Mobile Menu Drawer -->
</nav>

<div
  id="mobile-menu"
  class="absolute inset-0 top-16 z-[9999] h-screen w-screen opacity-0 invisible transition-opacity duration-300 aria-[hidden=false]:opacity-100 aria-[hidden=false]:visible"
  aria-hidden="true"
  data-mobile-menu
>
  <!-- Overlay -->
  <div
    class="absolute inset-0 bg-black/50"
    data-menu-overlay
  ></div>

  <!-- Menu Content -->
  <nav class="w-full bg-[var(--color-background-default)] flex flex-col transform -translate-x-full  aria-[hidden=false]:translate-x-0 shadow-lg">
    {% if shop_menu and shop_menu.links.size > 0 %}
      <div class="mb-6">
        <ul class="list-none m-0 p-0">
          {% for link in shop_menu.links %}
            <li class="border-b border-black/5">
              <a
                href="{{ link.url }}"
                class="block px-6 py-4 text-[var(--color-foreground)] no-underline text-lg font-medium hover:bg-black/5 focus:outline-2 focus:outline-[var(--color-foreground)] focus:outline-offset-[-2px]"
              >
                {{ link.title }}
              </a>
            </li>
          {% endfor %}
        </ul>
      </div>
    {% endif %}

    {% if marketing_menu and marketing_menu.links.size > 0 %}
      <div class="px-6">
        <ul class="list-none m-0 p-0 flex flex-col gap-2">
          {% for link in marketing_menu.links %}
            <li>
              <a
                href="{{ link.url }}"
                class="block py-2 text-[var(--color-foreground)]/64 no-underline text-base hover:text-[var(--color-foreground)] focus:outline-2 focus:outline-[var(--color-foreground)] focus:outline-offset-2"
              >
                {{ link.title }}
              </a>
            </li>
          {% endfor %}
        </ul>
      </div>
    {% endif %}
  </nav>
</div>

{% javascript %}
  class MobileMenu {
    constructor() {
      this.menuToggle = document.querySelector('[data-menu-toggle]');
      this.mobileMenu = document.querySelector('[data-mobile-menu]');
      this.menuContent = this.mobileMenu?.querySelector('.transform');
      this.menuOverlay = document.querySelector('[data-menu-overlay]');
      this.isOpen = false;

      this.init();
    }

    init() {
      if (!this.menuToggle || !this.mobileMenu) {
        console.error('MobileMenu: Required elements not found');
        return;
      }

      this.bindEvents();
      this.setupFocusManagement();
    }

    bindEvents() {
      this.menuToggle.addEventListener('click', () => this.toggle());
      this.menuOverlay.addEventListener('click', () => this.close());

      // Close on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.isOpen) {
          this.close();
        }
      });

      // Close on window resize to desktop
      window.addEventListener('resize', () => {
        if (window.innerWidth >= 768 && this.isOpen) {
          this.close();
        }
      });

      // Close menu when clicking a link
      this.mobileMenu.addEventListener('click', (e) => {
        if (e.target.matches('a[href]')) {
          this.close();
        }
      });
    }

    setupFocusManagement() {
      // Trap focus within mobile menu when open
      this.mobileMenu.addEventListener('keydown', (e) => {
        if (!this.isOpen) return;

        const focusableElements = this.mobileMenu.querySelectorAll(
          '[href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
        );
        const firstElement = focusableElements[0];
        const lastElement = focusableElements[focusableElements.length - 1];

        if (e.key === 'Tab') {
          if (e.shiftKey) {
            if (document.activeElement === firstElement) {
              e.preventDefault();
              lastElement.focus();
            }
          } else {
            if (document.activeElement === lastElement) {
              e.preventDefault();
              firstElement.focus();
            }
          }
        }
      });
    }

    toggle() {
      this.isOpen ? this.close() : this.open();
    }

    open() {
      this.isOpen = true;
      this.menuToggle.setAttribute('aria-expanded', 'true');
      this.mobileMenu.setAttribute('aria-hidden', 'false');
      if (this.menuContent) {
        this.menuContent.setAttribute('aria-hidden', 'false');
      }
      document.body.style.overflow = 'hidden';
    }

    close() {
      this.isOpen = false;
      this.menuToggle.setAttribute('aria-expanded', 'false');
      this.mobileMenu.setAttribute('aria-hidden', 'true');
      if (this.menuContent) {
        this.menuContent.setAttribute('aria-hidden', 'true');
      }
      document.body.style.overflow = '';
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new MobileMenu());
  } else {
    new MobileMenu();
  }
{% endjavascript %}
