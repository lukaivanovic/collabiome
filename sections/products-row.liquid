{% liquid
  assign section_id = section.settings.custom_id | default: section.id
  assign products = section.settings.products
  if products == blank
    assign products = collections.all.products
  endif
%}

<div class="products-row container">
  {% if section.settings.title != blank %}
    <h2 class="products-row__title text-2xl uppercase">{{ section.settings.title | escape }}</h2>
  {% endif %}

  <div class="embla products-row__carousel" data-section-id="{{ section_id }}">
    <div class="embla__container">
      {% for product in products limit: 6 %}
        <div class="embla__slide">
          <a href="{{ product.url }}" class="product-card">
            <div class="product-card__media">
              {% if product.featured_media %}
                {% render 'image', image: product.featured_media, class: 'product-card__image' %}
              {% else %}
                <div class="product-card__placeholder"></div>
              {% endif %}
            </div>
            <div class="product-card__content">
              <h3 class="product-card__title">{{ product.title | escape }}</h3>
              <p class="product-card__price">
                {% if product.price_varies %}
                  {{ 'products.price.from_price_html' | t: price: product.price_min | money }}
                {% else %}
                  {{ product.price | money }}
                {% endif %}
              </p>
            </div>
          </a>
        </div>
      {% endfor %}
    </div>

    <button
      class="embla__prev products-row__nav products-row__nav--prev"
      aria-label="{{ 'sections.products_row.previous_product' | t }}"
    >
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M15 18L9 12L15 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </button>

    <button
      class="embla__next products-row__nav products-row__nav--next"
      aria-label="{{ 'sections.products_row.next_product' | t }}"
    >
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M9 18L15 12L9 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </button>
  </div>

  <!-- Progress Bar -->
  <div class="products-row__progress" aria-hidden="true">
    <div class="products-row__progress-bar"></div>
  </div>
</div>

{% javascript %}
  document.addEventListener('DOMContentLoaded', function () {
    // Load Embla Carousel from CDN
    const script = document.createElement('script');
    script.src = 'https://unpkg.com/embla-carousel/embla-carousel.umd.js';
    script.onload = function () {
      // Initialize Embla Carousel for each products row
      document.querySelectorAll('.products-row__carousel').forEach(function (carouselElement) {
        const embla = EmblaCarousel(carouselElement, {
          loop: true,
          align: 'start',
          containScroll: 'trimSnaps',
          dragFree: false,
          skipSnaps: false,
          slidesToScroll: 1,
        });

        // Navigation buttons
        const prevButton = carouselElement.querySelector('.embla__prev');
        const nextButton = carouselElement.querySelector('.embla__next');

        if (prevButton) {
          prevButton.addEventListener('click', embla.scrollPrev);
        }
        if (nextButton) {
          nextButton.addEventListener('click', embla.scrollNext);
        }

        // Update button states and progress bar
        function updateButtons() {
          if (prevButton) {
            prevButton.disabled = !embla.canScrollPrev();
          }
          if (nextButton) {
            nextButton.disabled = !embla.canScrollNext();
          }
        }

        // Update progress bar
        function updateProgressBar() {
          const progressBar = carouselElement.parentElement.querySelector('.products-row__progress-bar');
          if (progressBar) {
            const scrollProgress = embla.scrollProgress();
            const progressPercentage = Math.min(Math.max(scrollProgress * 100, 0), 100);
            progressBar.style.width = `${progressPercentage}%`;
            console.log('Progress:', progressPercentage + '%'); // Debug log
          } else {
            console.log('Progress bar not found'); // Debug log
          }
        }

        // Initial button state and progress bar
        updateButtons();

        // Initialize progress bar with a small delay to ensure DOM is ready
        setTimeout(() => {
          updateProgressBar();
        }, 100);

        // Update buttons and progress bar on scroll
        embla.on('select', updateButtons);
        embla.on('scroll', updateProgressBar);
        embla.on('pointerUp', updateProgressBar);
      });
    };
    document.head.appendChild(script);
  });
{% endjavascript %}

{% stylesheet %}
  .products-row {
    padding-top: 120px;
    padding-bottom: 120px;
  }

  .products-row__title {
    margin-bottom: 2rem;
  }

  .products-row__carousel {
    position: relative;
    overflow: hidden;
  }

  .embla__container {
    display: flex;
    gap: 0.75rem;
  }

  .embla__slide {
    flex: 0 0 320px;
    min-width: 0;
  }

  .embla__slide .product-card {
    width: 100%;
    height: 100%;
  }

  .products-row__nav {
    position: absolute;
    top: 50%;
    z-index: 2;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 48px;
    height: 48px;
    border: 2px solid #000;
    border-radius: 50%;
    background: #fff;
    color: #000;
    cursor: pointer;
    transition: all 0.2s ease;
    transform: translateY(-50%);
  }

  .products-row__nav--prev {
    left: 0;
  }

  .products-row__nav--next {
    right: 0;
  }

  .products-row__nav:hover:not(:disabled) {
    background: var(--color-foreground);
    color: var(--color-background);
    border-color: var(--color-foreground);
  }

  .products-row__nav:disabled {
    opacity: 0.3;
    cursor: not-allowed;
  }

  .products-row__nav svg {
    width: 20px;
    height: 20px;
  }

  .product-card {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    background: var(--color-background);
    color: var(--color-foreground);
    text-decoration: none;
    border-radius: 8px;
    overflow: hidden;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .product-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .product-card__media {
    position: relative;
    aspect-ratio: 3 / 4;
    width: 100%;
    overflow: hidden;
    border-radius: 8px;
  }

  .product-card__image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .product-card__placeholder {
    width: 100%;
    height: 100%;
    background: linear-gradient(180deg, rgb(0 0 0 / 0.04), rgb(0 0 0 / 0.12));
  }

  .product-card__content {
    display: grid;
    gap: 0.25rem;
  }

  .product-card__title {
    font-size: 0.95rem;
  }

  .product-card__price {
    font-variant-numeric: tabular-nums;
    opacity: 0.9;
  }

  /* Progress Bar Styles */
  .products-row__progress {
    width: 100%;
    height: 4px;
    background-color: rgba(0, 0, 0, 0.1);
    border-radius: 2px;
    margin-top: 2rem;
    overflow: hidden;
  }

  .products-row__progress-bar {
    height: 100%;
    background-color: var(--color-foreground, #000);
    border-radius: 2px;
    width: 0%;
    min-width: 2px;
    transition: width 0.3s ease;
    transform-origin: left;
  }

  @media (max-width: 768px) {
    .products-row {
      padding-top: 80px;
      padding-bottom: 80px;
    }

    .products-row__carousel {
      margin: 0 -16px;
      padding: 0 16px;
    }

    .embla__slide {
      flex: 0 0 280px;
    }

    .products-row__nav {
      width: 40px;
      height: 40px;
    }

    .products-row__nav--prev {
      left: 20px;
    }

    .products-row__nav--next {
      right: -20px;
    }

    .products-row__nav svg {
      width: 16px;
      height: 16px;
    }

    .products-row__progress {
      margin-top: 1.5rem;
    }
  }
{% endstylesheet %}

{% schema %}
{
  "name": "t:general.product",
  "tag": "section",
  "settings": [
    { "type": "text", "id": "title", "label": "t:labels.text", "default": "Featured products" },
    { "type": "product_list", "id": "products", "label": "t:general.product", "limit": 24 }
  ],
  "presets": [{ "name": "t:general.product", "category": "t:general.main" }]
}
{% endschema %}
