{% comment %}
  This section is used in the product template to render product page with
  media, content, and add-to-cart form.

  https://shopify.dev/docs/storefronts/themes/architecture/templates/product
{% endcomment %}

{%- liquid
  assign benefits = product.metafields.custom.benefits.value
  assign accordion_items = product.metafields.custom.accordion.value
  assign headline = product.metafields.custom.headline.value
-%}

<div class="w-full max-w-[1600px] !mx-auto px-0 md:px-6 pt-10 md:pb-10 grid gap-10 lg:[grid-template-columns:1fr_640px]">
  <script id="product-data" type="application/json">
    {{ product | json }}
  </script>
  <script src="{{ 'product-form.js' | asset_url }}" defer="defer"></script>

  {% comment %} Product images {% endcomment %}
  <div class="flex flex-col md:items-center gap-3 px-4 md:px-0 w-full overflow-x-hidden">
    <div class="overflow-hidden relative rounded-2xl  w-full">
      <div
        class="embla embla-product flex overflow-hidden relative h-full"
        data-product-id="{{ product.id }}"
      >
        <div class="flex bg-white">
          {% for image in product.images %}
            <div class="embla__slide h-full w-full object-cover">
              {% render 'image', image: image %}
            </div>
          {% endfor %}
        </div>

        <div class="absolute bottom-2 right-2">
          <button
            class="embla__prev  bg-black rounded-full z-2 p-1 text-white"
            aria-label="Previous image"
          >
            {{ 'icon-chevron-left.svg' | inline_asset_content }}
          </button>

          <button
            class="embla__next   bg-black rounded-full z-2 p-1 text-white"
            aria-label="Next image"
          >
            {{ 'icon-chevron-right.svg' | inline_asset_content }}
          </button>
        </div>
      </div>
    </div>

    {%- if product.images.size > 1 -%}
      <div class="embla-thumbs flex gap-2 overflow-x-auto flex-nowrap w-full">
        {%- for image in product.images -%}
          <button
            class="embla-thumbs__slide flex-shrink-0 w-16 h-16 rounded-lg overflow-hidden border-2 bg-white opacity-60 hover:opacity-80 transition-all data-[active=true]:border-black data-[active=true]:opacity-100"
            type="button"
            aria-label="View image {{ forloop.index }}"
            data-active="false"
          >
            {% render 'image', image: image %}
          </button>
        {%- endfor -%}
      </div>
    {%- endif -%}
  </div>

  {% comment %} Product content {% endcomment %}
  <div class="flex flex-col gap-10 bg-white rounded-t-3xl p-6 md:p-10 md:rounded-3xl">
    <div>
      <h1 class="text-3xl font-medium uppercase">{{ product.title }}</h1>
      <p class="font-geist">{{ headline }}</p>
    </div>

    {% comment %} Buy form{% endcomment %}
    {% render 'buy-form', product: product, section_id: section.id %}

    {% comment %} Description {% endcomment %}
    <div>
      <h3 class="text-base uppercase">Description</h3>
      <div class="flex flex-col gap-2">
        {{ product.description }}
      </div>
    </div>

    {% comment %} Benefits icons {% endcomment %}
    <div class="product-benefits__list grid gap-4 [grid-template-columns:repeat(auto-fit,minmax(280px,1fr))]">
      {%- for benefit in benefits -%}
        <div class="product-benefits__item flex items-start gap-3 bg-white rounded-lg">
          {{ 'icon-check.svg' | inline_asset_content }}
          <span class="product-benefits__text text-base leading-6 text-gray-700">{{ benefit | strip }}</span>
        </div>
      {%- endfor -%}
    </div>

    {% comment %} Benefits {% endcomment %}
    <div class="flex flex-col gap-4">
      <h3 class="text-base uppercase">Benefits</h3>
      <div class="flex flex-col  gap-2">
        {%- for benefit in benefits -%}
          <div class="flex items-center gap-3 bg-white rounded-lg">
            {{ 'icon-check.svg' | inline_asset_content }}
            <span>{{ benefit | strip }}</span>
          </div>
        {%- endfor -%}
      </div>
    </div>

    {% comment %} Accordions {% endcomment %}
    <div class="flex flex-col gap-4">
      <h3 class="text-base uppercase">More information</h3>
      <div class="product-accordion flex flex-col">
        {%- for accordion_item in accordion_items -%}
          <collapsible-item class="accordion-item border-b border-gray-200 bg-white hover:border-gray-300 transition-colors">
            <button
              class="accordion-trigger w-full flex items-center justify-between py-3 px-1 text-left hover:bg-gray-50"
              data-collapsible-trigger
              type="button"
            >
              <span class="accordion-title  font-medium text-primary">
                {{- accordion_item.title | strip -}}
              </span>
              {{ 'icon-plus.svg' | inline_asset_content }}
            </button>
            <div class="accordion-content" data-collapsible-content>
              <div class=" px-4 pb-4 text-[15px] leading-[1.6] text-gray-600">
                {{ accordion_item.content | metafield_tag }}
              </div>
            </div>
          </collapsible-item>
        {%- endfor -%}
      </div>
    </div>

    <script src="{{ 'collapsible.js' | asset_url }}" defer></script>
  </div>
</div>

{% stylesheet %}
  .option-value input[type='radio'] {
    appearance: none;
    -webkit-appearance: none;
    width: 16px;
    height: 16px;
    border: 1px solid #ddd;
    border-radius: 50%;
    outline: none;
    cursor: pointer;
    transition: all 0.2s ease;
    flex-shrink: 0;
    position: relative;
  }

  .option-value input[type='radio']:checked {
    border-color: #000;
  }

  .option-value input[type='radio']:checked::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background: var(--gradient, linear-gradient(100deg, #a2eeff 3.17%, #b4ceff 35.34%, #d4b9ff 103.04%));
  }

  .option-value:hover input[type='radio'] {
    border-color: #999;
  }

  .option-text {
    font-size: 14px;
    color: #333;
  }

  .option-value input[type='radio']:checked ~ .option-text {
    font-weight: 500;
  }

  .embla-product .embla__slide {
    flex: 0 0 100%;
    min-width: 0;
  }

  /* Thumbnail Styles */
  .embla-thumbs {
    scrollbar-width: thin;
    scrollbar-color: #ddd transparent;
  }

  .embla-thumbs::-webkit-scrollbar {
    height: 6px;
  }

  .embla-thumbs::-webkit-scrollbar-track {
    background: transparent;
  }

  .embla-thumbs::-webkit-scrollbar-thumb {
    background: #ddd;
    border-radius: 3px;
  }

  /* Accordion Styles (only the interactive parts kept) */

  .accordion-item.active .accordion-icon {
    transform: rotate(180deg);
  }

  .accordion-content {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease;
  }

  .accordion-item.active .accordion-content {
    max-height: 500px;
  }
{% endstylesheet %}

{% javascript %}
  document.addEventListener('DOMContentLoaded', function () {
    // Load Embla Carousel from CDN
    const script = document.createElement('script');
    script.src = 'https://unpkg.com/embla-carousel/embla-carousel.umd.js';
    script.onload = function () {
      // Initialize Embla Carousel for product images
      const carouselElement = document.querySelector('.embla-product');
      if (carouselElement) {
        const embla = EmblaCarousel(carouselElement, {
          loop: true,
          align: 'center',
        });

        // Navigation buttons
        const prevButton = carouselElement.querySelector('.embla__prev');
        const nextButton = carouselElement.querySelector('.embla__next');

        // Thumbnail elements
        const thumbnails = document.querySelectorAll('.embla-thumbs__slide');

        if (prevButton) {
          prevButton.addEventListener('click', embla.scrollPrev);
        }
        if (nextButton) {
          nextButton.addEventListener('click', embla.scrollNext);
        }

        // Update button states
        function updateButtons() {
          if (prevButton) {
            prevButton.disabled = !embla.canScrollPrev();
          }
          if (nextButton) {
            nextButton.disabled = !embla.canScrollNext();
          }
        }

        // Update thumbnail active state
        function updateThumbnails() {
          const selectedIndex = embla.selectedScrollSnap();
          thumbnails.forEach((thumb, index) => {
            thumb.setAttribute('data-active', index === selectedIndex ? 'true' : 'false');
          });
        }

        // Add click handlers to thumbnails
        thumbnails.forEach((thumb, index) => {
          thumb.addEventListener('click', () => {
            embla.scrollTo(index);
          });
        });

        // Initial states
        updateButtons();
        updateThumbnails();

        // Update on scroll
        embla.on('select', () => {
          updateButtons();
          updateThumbnails();
        });
      }
    };
    document.head.appendChild(script);
  });
{% endjavascript %}

{% schema %}
{
  "name": "Product",
  "settings": [],
  "class": "bg-pink",
  "disabled_on": {
    "groups": ["header", "footer"]
  }
}
{% endschema %}
