{% comment %}
  This section is used in the product template to render product page with
  media, content, and add-to-cart form.

  https://shopify.dev/docs/storefronts/themes/architecture/templates/product
{% endcomment %}

<div class="container">
  <div class="product-container">
    <div class="product-main-image">
      <!-- changed -->
      {% render 'image', class: 'product-image', image: product.featured_image %}
    </div>

    <div class="product-content">
      <h1>{{ product.title }}</h1>
      <p class="product-price" data-base-price="{{ product.price }}">{{ product.price | money }}</p>
      <p>{{ product.description }}</p>

      <!-- Variant Selection -->
      {% unless product.has_only_default_variant %}
        <div class="product-form__variants">
          {% for option in product.options_with_values %}
            <div class="product-form__option">
              <label class="option-label">{{ option.name }}</label>
              <div class="option-values">
                {% for value in option.values %}
                  <label class="option-value">
                    <input
                      type="radio"
                      name="options[{{ option.name }}]"
                      value="{{ value }}"
                      {% if option.selected_value == value %}
                        checked
                      {% endif %}
                      data-option-position="{{ option.position }}"
                    >
                    <span class="option-text">{{ value }}</span>
                  </label>
                {% endfor %}
              </div>
            </div>
          {% endfor %}
        </div>
      {% endunless %}
      <form method="post" action="{{ routes.cart_add_url }}" id="add-to-cart-form">
        <input type="hidden" name="id" id="selected-variant-id" value="{{ product.variants.first.id }}">
        <input type="number" id="quantity-{{ product.id }}" name="quantity" value="1" min="1">
        <button class="button" type="submit">Add to Cart</button>
      </form>
    </div>
    <script id="product-data" type="application/json">
      {{ product | json }}
    </script>
  </div>

  <div class="product-thumbnails">
    <!-- changed -->
    <div class="thumbnail-grid">
      {% for image in product.images offset: 1 %}
        <div class="thumbnail">
          {% render 'image', class: 'product-image', image: image %}
        </div>
      {% endfor %}
    </div>
  </div>
</div>

{% stylesheet %}
  .product-form {
    display: flex;
    flex-direction: column;
    gap: 20px;
    margin-top: 20px;
  }
  .product-form__variants {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  .product-form__option {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .option-label {
    font-weight: 500;
    font-size: 14px;
    color: #333;
  }

  .option-values {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
  }

  .option-value {
    position: relative;
    cursor: pointer;
  }

  .option-value input[type='radio'] {
    position: absolute;
    opacity: 0;
    pointer-events: none;
  }

  .option-text {
    display: inline-block;
    padding: 8px 16px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background: white;
    font-size: 14px;
    transition: all 0.2s ease;
    min-width: 40px;
    text-align: center;
  }

  .option-value input[type='radio']:checked + .option-text {
    background: #000;
    color: white;
    border-color: #000;
  }

  .option-value:hover .option-text {
    border-color: #999;
  }

  .product-container {
    padding-top: 20px;
    display: grid;
    grid-template-columns: 1fr 1fr; /* two equal columns */
    gap: 20px;
  }
  .product-main-image {
    /* changed */
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .product-content {
    /* changed */
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .product-thumbnails {
    /* changed */
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .main-image {
    width: 100%;
  }

  .main-image img {
    width: 100%;
    height: auto;
  }

  .thumbnail-grid {
    display: grid;
    grid-template-columns: 1fr 1fr; /* two columns */
    gap: 10px;
  }

  .thumbnail img {
    width: 100%;
    height: auto;
    object-fit: cover;
  }
  @media (max-width: 768px) {
    .product-container {
      display: grid;
      grid-template-columns: 1fr;
      gap: 24px;
    }

    .product-main-image {
      /* changed */
      order: 1; /* First: main image */
    }

    .product-content {
      /* changed */
      order: 2; /* Second: product content */
    }

    .product-thumbnails {
      /* changed */
      order: 3; /* Third: thumbnail grid */
    }
  }
{% endstylesheet %}

{% javascript %}
  document.addEventListener('DOMContentLoaded', function () {
    // Get product data from script tag
    const productScript = document.querySelector('#product-data');
    const product = JSON.parse(productScript.textContent);
    const variants = product.variants;

    // DOM elements
    const priceElement = document.querySelector('.product-price');
    const variantInputs = document.querySelectorAll('input[name^="options"]');
    const addToCartForm = document.querySelector('#add-to-cart-form');
    const selectedVariantId = document.querySelector('#selected-variant-id');
    const quantityField = document.querySelector('#quantity-' + product.id);
    // Get current selected variant
    function getCurrentVariant() {
      const selectedOptions = {};

      variantInputs.forEach((input) => {
        if (input.checked) {
          const optionName = input.name.match(/options\[(.*?)\]/)[1];
          selectedOptions[optionName] = input.value;
        }
      });

      // Find matching variant
      return (
        variants.find((variant) => {
          return variant.options.every((option, index) => {
            const optionName = product.options[index];
            return selectedOptions[optionName] === option;
          });
        }) || variants[0]
      ); // fallback to first variant
    }

    // Update price and variant ID based on selected variant
    function updateVariant() {
      const currentVariant = getCurrentVariant();
      const quantity = parseInt(quantityField.value) || 1;
      const totalPrice = currentVariant.price * quantity;

      // Update price
      priceElement.textContent = new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
      }).format(totalPrice / 100);

      // Update variant ID in form
      selectedVariantId.value = currentVariant.id;

      // Update base price data attribute
      priceElement.dataset.basePrice = currentVariant.price;
    }

    // Variant selection handlers
    variantInputs.forEach((input) => {
      input.addEventListener('change', updateVariant);
    });

    // Quantity field input handler
    quantityField.addEventListener('input', updateVariant);

    // Add to cart functionality
    if (addToCartForm) {
      addToCartForm.addEventListener('submit', function (e) {
        e.preventDefault();

        const currentVariant = getCurrentVariant();
        const quantity = parseInt(quantityField.value) || 1;

        // Format data for Shopify Cart API
        const cartData = {
          items: [
            {
              id: currentVariant.id,
              quantity: quantity,
            },
          ],
        };
        fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(cartData),
        })
          .then((response) => response.json())
          .then((data) => {
            // Open cart drawer
            const cartDrawer = document.querySelector('cart-drawer');
            if (cartDrawer) {
              cartDrawer.open();
            }
          })
          .catch((error) => console.error('Error:', error));
      });
    }

    // Initialize on page load
    updateVariant();
  });
{% endjavascript %}

{% schema %}
{
  "name": "t:general.product",
  "settings": [],
  "disabled_on": {
    "groups": ["header", "footer"]
  }
}
{% endschema %}
