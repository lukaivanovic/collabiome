{% comment %}
  This section is used in the product template to render product page with
  media, content, and add-to-cart form.

  https://shopify.dev/docs/storefronts/themes/architecture/templates/product
{% endcomment %}

<div class="container">
  <div class="product-container">
    <div class="product-main-image">
      <div class="embla product-carousel" data-product-id="{{ product.id }}">
        <div class="embla__container">
          {% for image in product.images %}
            <div class="embla__slide">
              {% render 'image', class: 'product-image', image: image %}
            </div>
          {% endfor %}
        </div>

        <button
          class="embla__prev product-carousel__nav product-carousel__nav--prev"
          aria-label="Previous image"
        >
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M15 18L9 12L15 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </button>

        <button
          class="embla__next product-carousel__nav product-carousel__nav--next"
          aria-label="Next image"
        >
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M9 18L15 12L9 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </button>
      </div>
    </div>

    <div class="product-content">
      <h1>{{ product.title }}</h1>
      <div class="product-price-wrapper">
        {% if product.compare_at_price > product.price %}
          <span class="product-price-compare">{{ product.compare_at_price | money }}</span>
        {% endif %}
        <span class="product-price" data-base-price="{{ product.price }}">{{ product.price | money }}</span>
      </div>

      {%- form 'product', product, id: 'add-to-cart-form' -%}
        <!-- Variant Selection -->
        {% unless product.has_only_default_variant %}
          <div class="product-form__variants">
            {% for option in product.options_with_values %}
              <div class="product-form__option">
                <label class="option-label">{{ option.name }}</label>
                <div class="option-values">
                  {% for value in option.values %}
                    <label class="option-value">
                      <input
                        type="radio"
                        name="options[{{ option.name }}]"
                        value="{{ value }}"
                        {% if option.selected_value == value %}
                          checked
                        {% endif %}
                      >
                      <span class="option-text">{{ value }}</span>
                      <span class="option-price">{{ value.variant.price | money }}</span>
                      <span class="option-compare-price">{{ value.variant.compare_at_price | money }}</span>
                    </label>
                  {% endfor %}
                </div>
              </div>
            {% endfor %}
          </div>
        {% endunless %}

        <input type="number" id="quantity-{{ product.id }}" name="quantity" value="1" min="1">
        <button class="button-primary" type="submit">Add to Cart</button>
      {%- endform -%}

      <p class="font-geist">{{ product.content }}</p>
    </div>
    <script id="product-data" type="application/json">
      {{ product | json }}
    </script>
  </div>
</div>

{% stylesheet %}
  .product-price-wrapper {
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .product-price {
    font-size: 24px;
    font-weight: 600;
    color: #000;
  }

  .product-price-compare {
    font-size: 20px;
    color: #999;
    text-decoration: line-through;
  }

  .product-form {
    display: flex;
    flex-direction: column;
    gap: 20px;
    margin-top: 20px;
  }

  .product-form__variants {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  .product-form__option {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .option-label {
    font-weight: 500;
    font-size: 14px;
    color: #333;
  }

  .option-values {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .option-value {
    display: flex;
    align-items: center;
    gap: 12px;
    cursor: pointer;
  }

  .option-value input[type='radio'] {
    appearance: none;
    -webkit-appearance: none;
    width: 20px;
    height: 20px;
    border: 2px solid #ddd;
    border-radius: 50%;
    outline: none;
    cursor: pointer;
    transition: all 0.2s ease;
    flex-shrink: 0;
    position: relative;
  }

  .option-value input[type='radio']:checked {
    border-color: #000;
  }

  .option-value input[type='radio']:checked::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background: #000;
  }

  .option-value:hover input[type='radio'] {
    border-color: #999;
  }

  .option-text {
    font-size: 14px;
    color: #333;
  }

  .option-value input[type='radio']:checked ~ .option-text {
    font-weight: 500;
  }

  .product-container {
    padding-top: 40px;
    display: grid;
    grid-template-columns: 1fr 512px; /* two equal columns */
    gap: 40px;
  }

  .product-main-image {
    position: relative;
    overflow: hidden;
  }

  .product-carousel {
    position: relative;
    overflow: hidden;
  }

  .product-carousel .embla__container {
    display: flex;
  }

  .product-carousel .embla__slide {
    flex: 0 0 100%;
    min-width: 0;
  }

  .product-carousel .embla__slide .product-image {
    width: 100%;
    height: auto;
  }

  .product-carousel__nav {
    position: absolute;
    top: 50%;
    z-index: 2;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border: none;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.9);
    color: #000;
    cursor: pointer;
    transition: all 0.2s ease;
    transform: translateY(-50%);
  }

  .product-carousel__nav--prev {
    left: 16px;
  }

  .product-carousel__nav--next {
    right: 16px;
  }

  .product-carousel__nav:hover:not(:disabled) {
    background: #fff;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  }

  .product-carousel__nav:disabled {
    opacity: 0.3;
    cursor: not-allowed;
  }

  .product-carousel__nav svg {
    width: 20px;
    height: 20px;
  }

  .product-content {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }
  @media (max-width: 768px) {
    .product-container {
      display: grid;
      grid-template-columns: 1fr;
      gap: 24px;
    }

    .product-main-image {
      order: 1;
    }

    .product-content {
      order: 2;
    }

    .product-carousel__nav {
      width: 32px;
      height: 32px;
    }

    .product-carousel__nav--prev {
      left: 8px;
    }

    .product-carousel__nav--next {
      right: 8px;
    }

    .product-carousel__nav svg {
      width: 16px;
      height: 16px;
    }
  }
{% endstylesheet %}

{% javascript %}
  document.addEventListener('DOMContentLoaded', function () {
    const product = JSON.parse(document.querySelector('#product-data').textContent);
    const form = document.querySelector('#add-to-cart-form');
    const priceElement = document.querySelector('.product-price');
    const priceWrapper = document.querySelector('.product-price-wrapper');
    const quantityField = document.querySelector('#quantity-' + product.id);

    // Load Embla Carousel from CDN
    const script = document.createElement('script');
    script.src = 'https://unpkg.com/embla-carousel/embla-carousel.umd.js';
    script.onload = function () {
      // Initialize Embla Carousel for product images
      const carouselElement = document.querySelector('.product-carousel');
      if (carouselElement) {
        const embla = EmblaCarousel(carouselElement, {
          loop: true,
          align: 'center',
        });

        // Navigation buttons
        const prevButton = carouselElement.querySelector('.embla__prev');
        const nextButton = carouselElement.querySelector('.embla__next');

        if (prevButton) {
          prevButton.addEventListener('click', embla.scrollPrev);
        }
        if (nextButton) {
          nextButton.addEventListener('click', embla.scrollNext);
        }

        // Update button states
        function updateButtons() {
          if (prevButton) {
            prevButton.disabled = !embla.canScrollPrev();
          }
          if (nextButton) {
            nextButton.disabled = !embla.canScrollNext();
          }
        }

        // Initial button state
        updateButtons();

        // Update buttons on scroll
        embla.on('select', updateButtons);
      }
    };
    document.head.appendChild(script);

    // Get currently selected variant from Shopify's native form
    function getCurrentVariant() {
      const formData = new FormData(form);
      const variantId = formData.get('id');
      return product.variants.find((v) => v.id == variantId) || product.variants[0];
    }

    // Update price display
    function updatePrice() {
      const variant = getCurrentVariant();
      const quantity = parseInt(quantityField.value) || 1;
      const totalPrice = variant.price * quantity;
      const compareAtPrice = variant.compare_at_price * quantity;

      // Update regular price
      priceElement.textContent = new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
      }).format(totalPrice / 100);

      // Handle compare at price
      let compareElement = priceWrapper.querySelector('.product-price-compare');

      if (variant.compare_at_price && variant.compare_at_price > variant.price) {
        if (!compareElement) {
          compareElement = document.createElement('span');
          compareElement.className = 'product-price-compare';
          priceWrapper.insertBefore(compareElement, priceElement);
        }
        compareElement.textContent = new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: 'USD',
        }).format(compareAtPrice / 100);
      } else if (compareElement) {
        compareElement.remove();
      }
    }

    // Listen for variant changes (Shopify's form updates the hidden 'id' field)
    form.addEventListener('change', updatePrice);

    // Ajax cart add with drawer
    form.addEventListener('submit', function (e) {
      e.preventDefault();

      fetch('/cart/add.js', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          items: [
            {
              id: getCurrentVariant().id,
              quantity: parseInt(quantityField.value) || 1,
            },
          ],
        }),
      })
        .then((response) => response.json())
        .then(() => {
          const cartDrawer = document.querySelector('cart-drawer');
          if (cartDrawer) cartDrawer.open();
        })
        .catch((error) => console.error('Error:', error));
    });

    updatePrice();
  });
{% endjavascript %}

{% schema %}
{
  "name": "t:general.product",
  "settings": [],
  "disabled_on": {
    "groups": ["header", "footer"]
  }
}
{% endschema %}
