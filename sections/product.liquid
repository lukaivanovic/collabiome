{% comment %}
  This section is used in the product template to render product page with
  media, content, and add-to-cart form.

  https://shopify.dev/docs/storefronts/themes/architecture/templates/product
{% endcomment %}

{%- liquid
  assign benefits = product.metafields.custom.benefits.value
  assign accordion_items = product.metafields.custom.accordion.value
-%}

<div class="container mx-auto px-4">
  <div class="product-container grid gap-10 pt-10 lg:[grid-template-columns:1fr_512px]">
    <div class="product-main-image">
      <div class="embla product-carousel" data-product-id="{{ product.id }}">
        <div class="embla__container">
          {% for image in product.images %}
            <div class="embla__slide">
              {% render 'image', class: 'product-image', image: image %}
            </div>
          {% endfor %}
        </div>

        <button
          class="embla__prev product-carousel__nav product-carousel__nav--prev"
          aria-label="Previous image"
        >
          {{ 'icon-chevron-left.svg' | inline_asset_content }}
        </button>

        <button
          class="embla__next product-carousel__nav product-carousel__nav--next"
          aria-label="Next image"
        >
          {{ 'icon-chevron-right.svg' | inline_asset_content }}
        </button>
      </div>
    </div>

    <div class="product-content flex flex-col gap-5">
      <h1>{{ product.title }}</h1>
      <div class="product-price-wrapper flex items-center gap-3">
        {% if product.compare_at_price > product.price %}
          <span class="product-price-compare text-lg text-gray-500 line-through">
            {{- product.compare_at_price | money -}}
          </span>
        {% endif %}
        <span class="product-price text-2xl font-semibold text-black" data-base-price="{{ product.price }}">
          {{- product.price | money -}}
        </span>
      </div>

      {%- form 'product', product, id: 'add-to-cart-form' -%}
        <!-- Variant Selection -->
        {% unless product.has_only_default_variant %}
          <div class="product-form__variants flex flex-col gap-4 mt-5">
            {% for option in product.options_with_values %}
              <div class="product-form__option flex flex-col gap-2">
                <label class="option-label text-sm font-medium text-gray-700">{{ option.name }}</label>
                <div class="option-values flex flex-col gap-3">
                  {% for value in option.values %}
                    <label class="option-value flex items-center justify-between border border-gray-200 rounded-lg p-3 gap-3 cursor-pointer">
                      <div class="flex items-center gap-2">
                        <input
                          type="radio"
                          name="options[{{ option.name }}]"
                          value="{{ value }}"
                          {% if option.selected_value == value %}
                            checked
                          {% endif %}
                          class="w-4 h-4 rounded-full border border-gray-300 cursor-pointer"
                        >
                        <span class="text-large text-sm text-gray-700">{{ value }}</span>
                      </div>

                      <div class="option-price-wrapper flex items-center gap-3 self-end">
                        <span class="text-base text-accent line-through">
                          {{- value.variant.compare_at_price | money -}}
                        </span>
                        <span class="text-large text-base">{{ value.variant.price | money }}</span>
                      </div>
                    </label>
                  {% endfor %}
                </div>
              </div>
            {% endfor %}
          </div>
        {% endunless %}

        <div class="quantity-selector flex items-center w-fit border border-gray-200 rounded-lg overflow-hidden">
          <button
            type="button"
            class="quantity-button quantity-button--minus flex items-center justify-center w-10 h-11 bg-gray-100 text-gray-700 hover:bg-gray-200 disabled:opacity-30 disabled:cursor-not-allowed"
            aria-label="Decrease quantity"
            data-quantity-minus
          >
            {{ 'icon-minus.svg' | inline_asset_content }}
          </button>
          <input
            type="number"
            id="quantity-{{ product.id }}"
            name="quantity"
            value="1"
            min="1"
            class="quantity-input w-16 h-11 text-center text-base font-medium outline-none [appearance:textfield] border-x border-gray-200"
            aria-label="Quantity"
          >
          <button
            type="button"
            class="quantity-button quantity-button--plus flex items-center justify-center w-10 h-11 bg-gray-100 text-gray-700 hover:bg-gray-200 disabled:opacity-30 disabled:cursor-not-allowed"
            aria-label="Increase quantity"
            data-quantity-plus
          >
            {{ 'icon-plus.svg' | inline_asset_content }}
          </button>
        </div>
        <button
          class="buy-button h-10 bg-[var(--gradient)] text-[color:var(--color-foreground)] rounded-full px-4 inline-flex items-center justify-center w-fit font-medium font-[Geist] uppercase tracking-[0.08em] text-[15px] border-0 cursor-pointer"
          type="submit"
        >
          Add to Cart
        </button>
      {%- endform -%}

      <p class="font-geist">{{ product.content }}</p>

      <h3 class="text-base uppercase">Benefits</h3>

      <div class="product-benefits__list grid gap-4 [grid-template-columns:repeat(auto-fit,minmax(280px,1fr))]">
        {%- for benefit in benefits -%}
          <div class="product-benefits__item flex items-start gap-3 bg-white rounded-lg">
            {{ 'icon-check.svg' | inline_asset_content }}
            <span class="product-benefits__text text-base leading-6 text-gray-700">{{ benefit | strip }}</span>
          </div>
        {%- endfor -%}
      </div>

      <h3 class="text-base uppercase">More information</h3>

      <div class="product-accordion flex flex-col gap-3 mt-2">
        {%- for accordion_item in accordion_items -%}
          <collapsible-item class="accordion-item border-b border-gray-200 bg-white hover:border-gray-300 transition-colors">
            <button
              class="accordion-trigger w-full flex items-center justify-between py-2 px-1 text-left hover:bg-gray-50"
              data-collapsible-trigger
              type="button"
            >
              <span class="accordion-title text-base font-medium text-gray-700">
                {{- accordion_item.title | strip -}}
              </span>
              {{ 'icon-plus.svg' | inline_asset_content }}
            </button>
            <div class="accordion-content" data-collapsible-content>
              <div class="accordion-content-inner px-4 pb-4 text-[15px] leading-[1.6] text-gray-600">
                {{ accordion_item.content }}
              </div>
            </div>
          </collapsible-item>
        {%- endfor -%}
      </div>

      <script src="{{ 'collapsible.js' | asset_url }}" defer></script>
    </div>
  </div>
</div>

{% stylesheet %}
  .option-value input[type='radio'] {
    appearance: none;
    -webkit-appearance: none;
    width: 16px;
    height: 16px;
    border: 1px solid #ddd;
    border-radius: 50%;
    outline: none;
    cursor: pointer;
    transition: all 0.2s ease;
    flex-shrink: 0;
    position: relative;
  }

  .option-value input[type='radio']:checked {
    border-color: #000;
  }

  .option-value input[type='radio']:checked::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background: var(--gradient, linear-gradient(100deg, #a2eeff 3.17%, #b4ceff 35.34%, #d4b9ff 103.04%));
  }

  .option-value:hover input[type='radio'] {
    border-color: #999;
  }

  .option-text {
    font-size: 14px;
    color: #333;
  }

  .option-value input[type='radio']:checked ~ .option-text {
    font-weight: 500;
  }

  .product-main-image {
    position: relative;
    overflow: hidden;
  }

  .product-carousel {
    position: relative;
    overflow: hidden;
  }

  .product-carousel .embla__container {
    display: flex;
  }

  .product-carousel .embla__slide {
    flex: 0 0 100%;
    min-width: 0;
  }

  .product-carousel .embla__slide .product-image {
    width: 100%;
    height: auto;
  }

  .product-carousel__nav {
    position: absolute;
    top: 50%;
    z-index: 2;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border: none;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.9);
    color: #000;
    cursor: pointer;
    transition: all 0.2s ease;
    transform: translateY(-50%);
  }

  .product-carousel__nav--prev {
    left: 16px;
  }

  .product-carousel__nav--next {
    right: 16px;
  }

  .product-carousel__nav:hover:not(:disabled) {
    background: #fff;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  }

  .product-carousel__nav:disabled {
    opacity: 0.3;
    cursor: not-allowed;
  }

  .product-carousel__nav svg {
    width: 20px;
    height: 20px;
  }

  .quantity-input::-webkit-outer-spin-button,
  .quantity-input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
  /* Accordion Styles (only the interactive parts kept) */

  .accordion-item.active .accordion-icon {
    transform: rotate(180deg);
  }

  .accordion-content {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease;
  }

  .accordion-item.active .accordion-content {
    max-height: 500px;
  }

  @media (max-width: 768px) {
    .product-carousel__nav {
      width: 32px;
      height: 32px;
    }

    .product-carousel__nav--prev {
      left: 8px;
    }

    .product-carousel__nav--next {
      right: 8px;
    }

    .product-carousel__nav svg {
      width: 16px;
      height: 16px;
    }
  }
{% endstylesheet %}

{% javascript %}
  document.addEventListener('DOMContentLoaded', function () {
    const product = JSON.parse(document.querySelector('#product-data').textContent);
    const form = document.querySelector('#add-to-cart-form');
    const priceElement = document.querySelector('.product-price');
    const priceWrapper = document.querySelector('.product-price-wrapper');
    const quantityField = document.querySelector('#quantity-' + product.id);
    const minusButton = document.querySelector('[data-quantity-minus]');
    const plusButton = document.querySelector('[data-quantity-plus]');

    // Quantity button handlers
    function updateQuantityButtons() {
      const quantity = parseInt(quantityField.value) || 1;
      minusButton.disabled = quantity <= 1;
    }

    minusButton.addEventListener('click', function () {
      const currentValue = parseInt(quantityField.value) || 1;
      if (currentValue > 1) {
        quantityField.value = currentValue - 1;
        quantityField.dispatchEvent(new Event('change'));
        updateQuantityButtons();
      }
    });

    plusButton.addEventListener('click', function () {
      const currentValue = parseInt(quantityField.value) || 1;
      quantityField.value = currentValue + 1;
      quantityField.dispatchEvent(new Event('change'));
      updateQuantityButtons();
    });

    quantityField.addEventListener('change', function () {
      const value = parseInt(quantityField.value);
      if (isNaN(value) || value < 1) {
        quantityField.value = 1;
      }
      updateQuantityButtons();
      updatePrice();
    });

    // Initial state
    updateQuantityButtons();

    // Load Embla Carousel from CDN
    const script = document.createElement('script');
    script.src = 'https://unpkg.com/embla-carousel/embla-carousel.umd.js';
    script.onload = function () {
      // Initialize Embla Carousel for product images
      const carouselElement = document.querySelector('.product-carousel');
      if (carouselElement) {
        const embla = EmblaCarousel(carouselElement, {
          loop: true,
          align: 'center',
        });

        // Navigation buttons
        const prevButton = carouselElement.querySelector('.embla__prev');
        const nextButton = carouselElement.querySelector('.embla__next');

        if (prevButton) {
          prevButton.addEventListener('click', embla.scrollPrev);
        }
        if (nextButton) {
          nextButton.addEventListener('click', embla.scrollNext);
        }

        // Update button states
        function updateButtons() {
          if (prevButton) {
            prevButton.disabled = !embla.canScrollPrev();
          }
          if (nextButton) {
            nextButton.disabled = !embla.canScrollNext();
          }
        }

        // Initial button state
        updateButtons();

        // Update buttons on scroll
        embla.on('select', updateButtons);
      }
    };
    document.head.appendChild(script);

    // Get currently selected variant from Shopify's native form
    function getCurrentVariant() {
      const formData = new FormData(form);
      const variantId = formData.get('id');
      return product.variants.find((v) => v.id == variantId) || product.variants[0];
    }

    // Update price display
    function updatePrice() {
      const variant = getCurrentVariant();
      const quantity = parseInt(quantityField.value) || 1;
      const totalPrice = variant.price * quantity;
      const compareAtPrice = variant.compare_at_price * quantity;

      // Update regular price
      priceElement.textContent = new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
      }).format(totalPrice / 100);

      // Handle compare at price
      let compareElement = priceWrapper.querySelector('.product-price-compare');

      if (variant.compare_at_price && variant.compare_at_price > variant.price) {
        if (!compareElement) {
          compareElement = document.createElement('span');
          compareElement.className = 'product-price-compare';
          priceWrapper.insertBefore(compareElement, priceElement);
        }
        compareElement.textContent = new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: 'USD',
        }).format(compareAtPrice / 100);
      } else if (compareElement) {
        compareElement.remove();
      }
    }

    // Listen for variant changes (Shopify's form updates the hidden 'id' field)
    form.addEventListener('change', function (e) {
      // Only update price if it's not the quantity field changing
      if (e.target !== quantityField) {
        updatePrice();
      }
    });

    // Ajax cart add with drawer
    form.addEventListener('submit', function (e) {
      e.preventDefault();

      fetch('/cart/add.js', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          items: [
            {
              id: getCurrentVariant().id,
              quantity: parseInt(quantityField.value) || 1,
            },
          ],
        }),
      })
        .then((response) => response.json())
        .then(() => {
          const cartDrawer = document.querySelector('cart-drawer');
          if (cartDrawer) cartDrawer.open();
        })
        .catch((error) => console.error('Error:', error));
    });

    updatePrice();
  });
{% endjavascript %}

{% schema %}
{
  "name": "t:general.product",
  "settings": [],
  "disabled_on": {
    "groups": ["header", "footer"]
  }
}
{% endschema %}
